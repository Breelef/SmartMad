name: CI/CD with Oracle Cloud

on:
  push:
    branches:
      - main

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      BASE_URL: http://localhost:8080
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install Dependencies
        run: npm install
        working-directory: ./server

      - name: Start Docker Compose and Wait
        run: |
          docker compose up -d
          npx wait-on tcp:${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}
          npx wait-on tcp:localhost:6379
          sleep 10
        working-directory: ./server

      - name: Start backend in background
        working-directory: ./server
        run: |
          nohup npm run start &  
          sleep 10

      - name: Wait for Backend to be Ready
        run: |
          timeout 60 sh -c 'until curl -s http://localhost:8080/health; do sleep 5; done'

      - name: Seed database
        run: |
          npm run initdb
        working-directory: ./server

      - name: Wait for Redis to Be Available
        run: |
          npx wait-on tcp:localhost:6379
        working-directory: ./server

      - name: Run Jest Tests
        run: |
          mysql -h 127.0.0.1 --protocol=TCP -P 3307 -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e 'CREATE DATABASE IF NOT EXISTS smartrecipe_test;'

          # Debug: Print the current DATABASE_URL
          echo "Current DATABASE_URL in .env.test:"
          grep DATABASE_URL .env.test

          # Run migrations explicitly specifying the database URL
          DATABASE_URL="mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3307/smartrecipe_test" npx prisma migrate deploy

          # Verify tables were created
          mysql -h 127.0.0.1 --protocol=TCP -P 3307 -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} smartrecipe_test -e 'SHOW TABLES;'

          # Run tests
          npm run test:int
        working-directory: ./server
        env:
          DATABASE_URL: mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3307/smartrecipe_test

#      - name: Run Postman tests
#        working-directory: ./server
#        run: |
#          cd PostmanTest
#          newman run SmartRecipe_API_test.postman_collection.json -e SmartRecipe.postman_environment.json
      
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Stop Docker
        run: |
          docker compose down
        working-directory: ./server

  tests:
    name: CI Tests
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      BASE_URL: http://localhost:8080
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./server
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./client/smartmad
        run: npm install

      - name: Build frontend
        working-directory: ./client/smartmad
        run: npm run build

      - name: Start Docker Compose and Wait
        run: |
          docker compose up &
          npx wait-on tcp:${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}
          npx wait-on tcp:localhost:6379
          sleep 10
        working-directory: ./server

      - name: Start backend in background
        working-directory: ./server
        run: |
          nohup npm run start &  
          sleep 10 

      - name: Wait for backend to be ready
        run: |
          timeout 60 sh -c 'until curl -s http://localhost:8080/health; do sleep 5; done'

      - name: Start frontend in background
        working-directory: ./client/smartmad
        run: |
          nohup npm start &
          sleep 10

      - name: Seed database
        run: |
          npm run initdb
        working-directory: ./server

      - name: Wait for Redis to Be Available
        run: |
          npx wait-on tcp:localhost:6379
        working-directory: ./server

      - name: Run Cypress Tests
        run: |
          npx cypress run --browser chrome --spec './cypress/e2e/spec.cy.js'
          sleep 10
        working-directory: ./server/tests/cypress

      - name: Run Jest Tests
        run: |
          mysql -h 127.0.0.1 --protocol=TCP -P 3307 -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e 'CREATE DATABASE IF NOT EXISTS smartrecipe_test;'

          # Debug: Print the current DATABASE_URL
          echo "Current DATABASE_URL in .env.test:"
          grep DATABASE_URL .env.test

          # Run migrations explicitly specifying the database URL
          DATABASE_URL="mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3307/smartrecipe_test" npx prisma migrate deploy

          # Verify tables were created
          mysql -h 127.0.0.1 --protocol=TCP -P 3307 -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} smartrecipe_test -e 'SHOW TABLES;'

          # Run tests
          npm run test:int
        working-directory: ./server
        env:
          DATABASE_URL: mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3307/smartrecipe_test

#      - name: Run Postman tests
#        working-directory: ./server
#        run: |
#          cd PostmanTest
#          newman run SmartRecipe_API_test.postman_collection.json -e SmartRecipe.postman_environment.json

      - name: Stop Docker
        run: |
          docker compose down
        working-directory: ./server
