name: CI/CD with Oracle Cloud

on:
  push:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  cypress:
    name: Cypress Tests
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies (Backend)
        run: |
          npm install
          npm install cypress --save-dev
        working-directory: ./server

      - name: Install and Start Frontend
        run: |
          npm install
          npm run start & 
        working-directory: ./client/smartmad

      - name: Start Docker Compose
        run: |
          npm run docker &
        working-directory: ./server

      - name: Wait for Database to Be Available
        run: |
          npx wait-on tcp:${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}  # Wait for the database to be ready
        working-directory: ./server

      - name: Seed database
        run: |
          npm run seed
        working-directory: ./server

      - name: Wait for Redis to Be Available
        run: |
          npx wait-on tcp:localhost:6379
        working-directory: ./server

      - name: Start Backend Server
        run: |
          nohup npm run start & 
        working-directory: ./server

      - name: Wait for Backend and Frontend
        run: |
          npx wait-on tcp:localhost:8080
          npx wait-on tcp:localhost:3000

      # Step 6: Run Cypress tests
      - name: Run Cypress Tests
        run: |
          npx cypress run --browser chrome --spec './cypress/e2e/spec.cy.js'
        working-directory: ./server/tests/cypress

      # Step 7: Stop Docker Compose
      - name: Stop Docker Compose
        run: |
          npm run docker down
        working-directory: ./server

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Client-side build steps
      - name: Install Dependencies (Client)
        run: npm install
        working-directory: ./client/smartmad
      - name: Build Application (Client)
        run: npm run build
        working-directory: ./client/smartmad

      # Server-side test steps
      - name: Install Dependencies (Server)
        run: npm install
        working-directory: ./server

      # Start Docker Compose for server if needed
      - name: Start Docker Compose for Server
        run: |
          npm run docker &
        working-directory: ./server

      # Optional: List files (for debugging)
      - name: List Files
        run: ls -R
        working-directory: ./client/smartmad
